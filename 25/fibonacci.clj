#!/usr/bin/env clojure
; Each new term in the Fibonacci sequence is generated by adding the previous two 
; terms. By starting with 1 and 2, the first 10 terms will be:

; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

; Find the sum of all the even-valued terms in the sequence which do not exceed 
; four million.

(defn fib-recursive [n]
  (cond (= n 0) 0
        (= n 1) 1
        :else (+ (fib-recursive (- n 1))
                 (fib-recursive (- n 2)))))

(defn fib [n]
  (loop [a 1 b 0 count n]
    (if (= count 0)
      b
      (recur (+ a b) a (dec count)))))

(defn digits [n]
  (map #(- (int %) 48) (str n)))

(def nums (iterate inc 0))
(def fibs (map fib nums))
(println (first (filter #(= (count (digits (fib %))) 3) nums)))
